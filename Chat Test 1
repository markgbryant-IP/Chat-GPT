class SalesOrder:
    def __init__(self, order_id, customer_name, status='prospect'):
        self.order_id = order_id
        self.customer_name = customer_name
        self.status = status
    
    def update_status(self, new_status):
        if self.status == 'prospect' and new_status == 'lead':
            self.status = 'lead'
        elif self.status == 'lead' and new_status == 'converted':
            self.status = 'converted'
        elif self.status == 'converted' and new_status == 'paid':
            self.status = 'paid'
        elif self.status == 'paid' and new_status == 'delivered':
            self.status = 'delivered'
        else:
            print('Invalid status transition')
    
    def __str__(self):
        return f'Sales Order {self.order_id} for {self.customer_name} is currently in {self.status} status.'
# Create a new sales order
order = SalesOrder(1, 'John Doe')

# Print the current status of the sales order
print(order)

# Update the status of the sales order to 'lead'
order.update_status('lead')
print(order)

# Update the status of the sales order to 'converted'
order.update_status('converted')
print(order)

# Update the status of the sales order to 'paid'
order.update_status('paid')
print(order)

# Update the status of the sales order to 'delivered'
order.update_status('delivered')
print(order)

# Attempt an invalid status update
order.update_status('prospect')
